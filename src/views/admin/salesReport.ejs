<%- include('../partials/sidebar') %>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="p-8 flex-1 bg-gradient-to-br from-violet-50 via-indigo-50 to-blue-50 min-h-screen ml-64">
    <div class="max-w-7xl mx-auto">
        <!-- Header Section with Download Buttons -->
        <div class="flex justify-between items-center mb-12">
            <div>
                <h1 class="text-4xl font-extrabold bg-gradient-to-r from-violet-600 via-indigo-600 to-blue-600 bg-clip-text text-transparent tracking-tight">Sales Report</h1>
                <p class="text-gray-600 mt-2 text-lg">Track and analyze your business performance</p>
            </div>
            <div class="flex gap-4">
                <button onclick="downloadReport('excel')" 
                        class="flex items-center px-6 py-3 bg-gradient-to-r from-emerald-500 to-teal-500 text-white rounded-xl hover:from-emerald-600 hover:to-teal-600 transition-all duration-300 shadow-lg hover:shadow-emerald-200 transform hover:-translate-y-1">
                    <i class="fas fa-file-excel mr-2"></i>Download Excel
                </button>
                <button onclick="downloadReport('pdf')" 
                        class="flex items-center px-6 py-3 bg-gradient-to-r from-red-500 to-rose-500 text-white rounded-xl hover:from-red-600 hover:to-rose-600 transition-all duration-300 shadow-lg hover:shadow-red-200 transform hover:-translate-y-1">
                    <i class="fas fa-file-pdf mr-2"></i>Download PDF
                </button>
            </div>
        </div>

        <!-- Filter Section -->
        <div class="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-8 mb-12 border border-indigo-50">
            <div class="flex flex-wrap gap-4 mb-8">
                <button onclick="setPeriod('daily')" 
                        class="px-8 py-4 rounded-2xl transition-all duration-300 font-medium <%= period === 'daily' ? 'bg-gradient-to-r from-violet-600 to-indigo-600 text-white shadow-lg shadow-indigo-200 transform scale-105' : 'bg-white hover:bg-gray-50 hover:shadow-md border border-gray-100' %>">
                    <i class="far fa-calendar-day mr-2"></i>Daily
                </button>
                <button onclick="setPeriod('weekly')"
                        class="px-8 py-4 rounded-2xl transition-all duration-300 font-medium <%= period === 'weekly' ? 'bg-gradient-to-r from-violet-600 to-indigo-600 text-white shadow-lg shadow-indigo-200 transform scale-105' : 'bg-white hover:bg-gray-50 hover:shadow-md border border-gray-100' %>">
                    <i class="far fa-calendar-week mr-2"></i>Weekly
                </button>
                <button onclick="setPeriod('monthly')"
                        class="px-8 py-4 rounded-2xl transition-all duration-300 font-medium <%= period === 'monthly' ? 'bg-gradient-to-r from-violet-600 to-indigo-600 text-white shadow-lg shadow-indigo-200 transform scale-105' : 'bg-white hover:bg-gray-50 hover:shadow-md border border-gray-100' %>">
                    <i class="far fa-calendar-alt mr-2"></i>Monthly
                </button>
                <button onclick="setPeriod('yearly')"
                        class="px-8 py-4 rounded-2xl transition-all duration-300 font-medium <%= period === 'yearly' ? 'bg-gradient-to-r from-violet-600 to-indigo-600 text-white shadow-lg shadow-indigo-200 transform scale-105' : 'bg-white hover:bg-gray-50 hover:shadow-md border border-gray-100' %>">
                    <i class="far fa-calendar mr-2"></i>Yearly
                </button>
            </div>
            <div class="flex flex-wrap gap-6 items-end">
                <div class="flex-1 min-w-[200px]">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                    <input type="date" id="startDate" class="w-full px-4 py-3 border border-indigo-100 rounded-xl focus:ring-2 focus:ring-violet-400 focus:border-transparent transition-all bg-white/50" 
                           value="<%= dateRange.start?.toISOString().split('T')[0] %>">
                </div>
                <div class="flex-1 min-w-[200px]">
                    <label class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
                    <input type="date" id="endDate" class="w-full px-4 py-3 border border-indigo-100 rounded-xl focus:ring-2 focus:ring-violet-400 focus:border-transparent transition-all bg-white/50"
                           value="<%= dateRange.end?.toISOString().split('T')[0] %>">
                </div>
                <button onclick="applyDateFilter()" 
                        class="px-8 py-3 bg-gradient-to-r from-violet-600 to-indigo-600 text-white rounded-xl hover:from-violet-700 hover:to-indigo-700 transition-all duration-300 shadow-lg hover:shadow-indigo-200 transform hover:-translate-y-1">
                    <i class="fas fa-filter mr-2"></i>Apply Filter
                </button>
            </div>
        </div>

        <!-- Metrics Section -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-12">
            <div class="bg-white/80 backdrop-blur-lg p-8 rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 border border-indigo-50">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-gray-800 font-semibold text-lg">Total Orders</h3>
                    <div class="p-4 bg-gradient-to-br from-blue-500/10 to-indigo-500/10 rounded-2xl">
                        <i class="fas fa-shopping-cart text-2xl bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent"></i>
                    </div>
                </div>
                <p class="text-5xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent"><%= metrics.totalOrders %></p>
                <p class="text-gray-600 mt-4">All time orders</p>
            </div>

            <div class="bg-white/80 backdrop-blur-lg p-8 rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 border border-indigo-50">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-gray-800 font-semibold text-lg">Total Sales</h3>
                    <div class="p-4 bg-gradient-to-br from-emerald-500/10 to-teal-500/10 rounded-2xl">
                        <i class="fas fa-rupee-sign text-2xl bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent"></i>
                    </div>
                </div>
                <p class="text-4xl font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent">₹<%= metrics.totalSales.toFixed(2) %></p>
                <p class="text-gray-600 mt-4">Gross revenue</p>
            </div>

            <div class="bg-white/80 backdrop-blur-lg p-8 rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 border border-indigo-50">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-gray-800 font-semibold text-lg">Total Discount</h3>
                    <div class="p-4 bg-gradient-to-br from-purple-500/10 to-violet-500/10 rounded-2xl">
                        <i class="fas fa-tags text-2xl bg-gradient-to-r from-purple-600 to-violet-600 bg-clip-text text-transparent"></i>
                    </div>
                </div>
                <p class="text-4xl font-bold bg-gradient-to-r from-purple-600 to-violet-600 bg-clip-text text-transparent">₹<%= metrics.totalDiscount.toFixed(2) %></p>
                <p class="text-gray-600 mt-4">Total savings offered</p>
            </div>

            <div class="bg-white/80 backdrop-blur-lg p-8 rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 border border-indigo-50">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-gray-800 font-semibold text-lg">Average Order</h3>
                    <div class="p-4 bg-gradient-to-br from-amber-500/10 to-orange-500/10 rounded-2xl">
                        <i class="fas fa-chart-line text-2xl bg-gradient-to-r from-amber-600 to-orange-600 bg-clip-text text-transparent"></i>
                    </div>
                </div>
                <p class="text-4xl font-bold bg-gradient-to-r from-amber-600 to-orange-600 bg-clip-text text-transparent">₹<%= metrics.averageOrderValue.toFixed(2) %></p>
                <p class="text-gray-600 mt-4">Per order average</p>
            </div>
        </div>

        <!-- Orders Table -->
        <div class="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl overflow-hidden border border-indigo-50">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr class="bg-gradient-to-r from-violet-50 to-indigo-50">
                            <th class="px-6 py-4 text-left text-xs font-bold text-gray-800 uppercase tracking-wider">Order ID</th>
                            <th class="px-6 py-4 text-left text-xs font-bold text-gray-800 uppercase tracking-wider">Date</th>
                            <th class="px-6 py-4 text-left text-xs font-bold text-gray-800 uppercase tracking-wider">Customer</th>
                            <th class="px-6 py-4 text-left text-xs font-bold text-gray-800 uppercase tracking-wider">Items</th>
                            <th class="px-6 py-4 text-left text-xs font-bold text-gray-800 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-4 text-left text-xs font-bold text-gray-800 uppercase tracking-wider">Payment Method</th>
                            <th class="px-6 py-4 text-left text-xs font-bold text-gray-800 uppercase tracking-wider">Amount</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white/50 divide-y divide-gray-100">
                        <% orders.forEach(order => { %>
                            <tr class="hover:bg-gradient-to-r hover:from-violet-50/50 hover:to-indigo-50/50 transition-colors">
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                    <%= order.orderCode %>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                    <%= order.createdAt.toLocaleDateString() %>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    <%= order.userId?.firstName %> <%= order.userId?.lastName %>
                                </td>
                                <td class="px-6 py-4 text-sm text-gray-600">
                                    <% order.items.forEach((item, index) => { %>
                                        <div class="<%= index > 0 ? 'mt-2' : '' %>">
                                            <%= item.quantity %>x <%= item.product.name %>
                                        </div>
                                    <% }); %>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <% order.items.forEach((item, index) => { %>
                                        <% const status = item.order.status;
                                        const statusColor = {
                                            'delivered': 'bg-gradient-to-r from-green-100 to-emerald-100 text-green-800',
                                            'cancelled': 'bg-gradient-to-r from-red-100 to-rose-100 text-red-800',
                                            'returned': 'bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800',
                                            'refund processing': 'bg-gradient-to-r from-yellow-100 to-amber-100 text-yellow-800',
                                            'pending': 'bg-gradient-to-r from-blue-100 to-sky-100 text-blue-800',
                                            'processing': 'bg-gradient-to-r from-indigo-100 to-violet-100 text-indigo-800',
                                            'shipped': 'bg-gradient-to-r from-purple-100 to-fuchsia-100 text-purple-800'
                                        }[status] || 'bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800'; %>
                                        <span class="<%= index > 0 ? 'mt-2' : '' %> px-4 py-1.5 inline-flex text-xs leading-5 font-semibold rounded-full <%= statusColor %>">
                                            <%= status %>
                                        </span>
                                    <% }); %>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                    <%= order.payment.method %>
                                    <% const paymentStatus = order.payment.paymentStatus;
                                    const paymentStatusColor = {
                                        'completed': 'bg-gradient-to-r from-green-100 to-emerald-100 text-green-800',
                                        'failed': 'bg-gradient-to-r from-red-100 to-rose-100 text-red-800',
                                        'processing': 'bg-gradient-to-r from-yellow-100 to-amber-100 text-yellow-800',
                                        'refunded': 'bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800',
                                        'cancelled': 'bg-gradient-to-r from-red-100 to-rose-100 text-red-800',
                                        'refund processing': 'bg-gradient-to-r from-yellow-100 to-amber-100 text-yellow-800'
                                    }[paymentStatus] || 'bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800'; %>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                    ₹<%= order.totalAmount.toFixed(2) %>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    // Initialize Chart
    const ctx = document.getElementById('salesChart').getContext('2d');
    const dailyData = <%- JSON.stringify(dailyData) %>;
    
    const dates = Object.keys(dailyData);
    const sales = dates.map(date => {
        const dayData = dailyData[date];
        return {
            orders: dayData.orders,
            sales: dayData.sales,
            discount: dayData.discount,
            netRevenue: dayData.netRevenue
        };
    });
    
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: dates,
            datasets: [{
                label: 'Daily Sales',
                data: sales,
                borderColor: 'rgb(99, 102, 241)',
                backgroundColor: 'rgba(99, 102, 241, 0.1)',
                tension: 0.4,
                fill: true
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(99, 102, 241, 0.1)'
                    }
                },
                x: {
                    grid: {
                        color: 'rgba(99, 102, 241, 0.1)'
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        font: {
                            family: "'Inter', sans-serif"
                        }
                    }
                }
            }
        }
    });

    // Filter Functions
    function setPeriod(period) {
        window.location.href = `/admin/sales-report?period=${period}`;
    }

    async function applyDateFilter() {
        try {
            const startDateStr = document.getElementById('startDate').value;
            const endDateStr = document.getElementById('endDate').value;
            
            const startDate = new Date(startDateStr);
            startDate.setHours(0, 0, 0, 0);
            
            const endDate = new Date(endDateStr);
            endDate.setHours(23, 59, 59, 999);
            
            const today = new Date();
            today.setHours(23, 59, 59, 999);

            if (!startDateStr || !endDateStr) {
                await Swal.fire({
                    icon: 'warning',
                    title: 'Missing Dates',
                    text: 'Please select both start and end dates',
                    confirmButtonColor: '#4F46E5'
                });
                return;
            }

            if (startDate > today) {
                await Swal.fire({
                    icon: 'error',
                    title: 'Invalid Date',
                    text: 'Start date cannot be in the future',
                    confirmButtonColor: '#4F46E5'
                });
                return;
            }

            if (endDate < startDate) {
                await Swal.fire({
                    icon: 'error',
                    title: 'Invalid Date Range',
                    text: 'End date must be after or equal to start date',
                    confirmButtonColor: '#4F46E5'
                });
                return;
            }

            window.location.href = `/admin/sales-report?startDate=${startDateStr}&endDate=${endDateStr}`;

        } catch (error) {
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Error applying filter',
                confirmButtonColor: '#4F46E5'
            });
        }
    }

    // Download Functions
    async function downloadReport(type) {
        try {
            const startDateStr = document.getElementById('startDate').value;
            const endDateStr = document.getElementById('endDate').value;
            
            if (!startDateStr || !endDateStr) {
                await Swal.fire({
                    icon: 'warning',
                    title: 'Missing Dates',
                    text: 'Please select both start and end dates',
                    confirmButtonColor: '#4F46E5'
                });
                return;
            }

            Swal.fire({
                title: 'Generating report...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await fetch(`/admin/sales-report/download-${type}?startDate=${startDateStr}&endDate=${endDateStr}`);
            
            if (!response.ok) {
                throw new Error(`Download failed with status: ${response.status}`);
            }

            if (type === 'excel') {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `sales-report-${startDateStr}-to-${endDateStr}.xlsx`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                a.remove();
            } 
            else if (type === 'pdf') {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                window.open(url, '_blank');
                window.URL.revokeObjectURL(url);
            }

            Swal.close();

            await Swal.fire({
                icon: 'success',
                title: 'Success',
                text: `Report downloaded successfully!`,
                confirmButtonColor: '#4F46E5'
            });

        } catch (error) {
            console.error('Download error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Download Failed',
                text: error.message || 'Error downloading report',
                confirmButtonColor: '#4F46E5'
            });
        }
    }
</script>