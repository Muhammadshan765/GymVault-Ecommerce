    <%- include('../partials/sidebar')%> 
    <div class="p-6 flex-1">
        <div class="flex justify-between items-center mb-4">
            <h1 class="text-3xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent">Category!</h1>
            <div class="flex gap-3">
                <button onclick="openModal()" class="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-6 py-2 rounded-lg flex items-center gap-2 transition-all duration-300 transform hover:scale-105 shadow-lg">
                    <span class="text-xl">âž•</span> Add Category
                </button>
            </div>
        </div>

        <!-- Add Category Modal -->
        <div id="categoryModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 backdrop-blur-sm transition-all duration-300">
            <div class="bg-white rounded-2xl w-full max-w-md p-8 transform transition-all duration-300 scale-95 opacity-0" id="modalContent">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-3xl font-bold text-gray-800 bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent">Add New Category</h2>
                    <button onclick="closeModal()" class="text-gray-600 hover:text-gray-800 hover:rotate-90 transition-all duration-300">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                
                <form id="categoryForm" class="space-y-6" action="/admin/category/add" method="POST">
                    <div class="relative group">
                        <label for="categoryName" class="block text-sm font-semibold text-gray-700 mb-2">Category Name</label>
                        <input type="text" id="categoryName" name="categoryName" 
                            class="w-full px-5 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 outline-none hover:border-blue-400"
                            placeholder="Enter category name">
                        <div class="absolute bottom-0 left-0 h-0.5 w-0 bg-blue-600 transition-all duration-300 group-hover:w-full"></div>
                    </div>
                    
                    <div class="relative group">
                        <label for="description" class="block text-sm font-semibold text-gray-700 mb-2">Description</label>
                        <textarea id="description" name="categoryDescription" rows="4" 
                            class="w-full px-5 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 outline-none hover:border-blue-400 resize-none"
                            placeholder="Enter category description"></textarea>
                        <div class="absolute bottom-0 left-0 h-0.5 w-0 bg-blue-600 transition-all duration-300 group-hover:w-full"></div>
                    </div>

                    <div class="flex justify-end space-x-4 mt-8">
                        <button type="button" onclick="closeModal()" 
                            class="px-6 py-3 border-2 border-gray-300 rounded-xl text-gray-700 hover:bg-gray-50 transition-all duration-300 hover:shadow-md transform hover:scale-105">
                            Cancel
                        </button>
                        <button type="submit"
                            class="px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white rounded-xl transition-all duration-300 hover:shadow-lg transform hover:scale-105">
                            Add Category
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Categories Table -->
        <div class="overflow-x-auto bg-white shadow-lg rounded-lg">
            <table class="w-full border-collapse">
                <thead>
                    <tr class="bg-gray-200 text-left">
                        <th class="p-3 border">Category Name</th>
                        <th class="p-3 border">Description</th>
                        <th class="p-3 border">Status</th>
                        <th class="p-3 border text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% categories.forEach(category => { %>
                    <tr class="hover:bg-gray-100 transition">
                        <td class="p-3 border"><%= category.name %></td>
                        <td class="p-3 border"><%= category.description %></td>
                        <td class="p-3 border">
                            <span class="<%= category.isActive ? 'bg-green-500' : 'bg-red-500' %> text-white px-2 py-1 rounded text-sm">
                                <%= category.isActive ? 'Active' : 'Hidden' %>
                            </span>
                        </td>
                        <td class="p-3 border text-center">
                            <button onclick="confirmToggleCategory('<%= category._id %>', <%= category.isActive %>)" 
                                class="<%= category.isActive ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600' %> text-white px-3 py-1 rounded transition">
                                <%= category.isActive ? 'Hide' : 'Show' %>
                            </button>
                            <button onclick="openEditModal('<%= category._id %>', '<%= category.name %>', `<%= category.description %>`)" 
                                class="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 transition">
                                Edit
                            </button>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Edit Category Modal -->
    <div id="editCategoryModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 backdrop-blur-sm transition-all duration-300">
        <div class="bg-white rounded-2xl w-full max-w-md p-8 transform transition-all duration-300 scale-95 opacity-0" id="editModalContent">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-3xl font-bold text-gray-800 bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent">Edit Category</h2>
                <button onclick="closeEditModal()" class="text-gray-600 hover:text-gray-800 hover:rotate-90 transition-all duration-300">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <form id="editCategoryForm" class="space-y-6">
                <input type="hidden" id="editCategoryId" name="categoryId">
                <div class="relative group">
                    <label for="editCategoryName" class="block text-sm font-semibold text-gray-700 mb-2">Category Name</label>
                    <input type="text" id="editCategoryName" name="categoryName" required
                        class="w-full px-5 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 outline-none hover:border-blue-400"
                        placeholder="Enter category name">
                </div>
                
                <div class="relative group">
                    <label for="editDescription" class="block text-sm font-semibold text-gray-700 mb-2">Description</label>
                    <textarea id="editDescription" name="categoryDescription" rows="4" required
                        class="w-full px-5 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 outline-none hover:border-blue-400 resize-none"
                        placeholder="Enter category description"></textarea>
                </div>

                <div class="flex justify-end space-x-4 mt-8">
                    <button type="button" onclick="closeEditModal()" 
                        class="px-6 py-3 border-2 border-gray-300 rounded-xl text-gray-700 hover:bg-gray-50 transition-all duration-300 hover:shadow-md transform hover:scale-105">
                        Cancel
                    </button>
                    <button type="submit"
                        class="px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white rounded-xl transition-all duration-300 hover:shadow-lg transform hover:scale-105">
                        Update Category
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Loading Spinner -->
    <div id="loadingSpinner" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function openModal() {
            const modal = document.getElementById('categoryModal');
            const modalContent = document.getElementById('modalContent');
            modal.classList.remove('hidden');
            modal.classList.add('flex');
            setTimeout(() => {
                modalContent.classList.remove('scale-95', 'opacity-0');
                modalContent.classList.add('scale-100', 'opacity-100');
            }, 50);
        }

        function closeModal() {
            const modal = document.getElementById('categoryModal');
            const modalContent = document.getElementById('modalContent');
            modalContent.classList.remove('scale-100', 'opacity-100');
            modalContent.classList.add('scale-95', 'opacity-0');
            setTimeout(() => {
                modal.classList.remove('flex');
                modal.classList.add('hidden');
            }, 300);
        }

        function openEditModal(categoryId, categoryName, categoryDescription) {
            document.getElementById('editCategoryId').value = categoryId;
            document.getElementById('editCategoryName').value = categoryName;
            document.getElementById('editDescription').value = categoryDescription;

            const modal = document.getElementById('editCategoryModal');
            const modalContent = document.getElementById('editModalContent');
            modal.classList.remove('hidden');
            modal.classList.add('flex');
            setTimeout(() => {
                modalContent.classList.remove('scale-95', 'opacity-0');
                modalContent.classList.add('scale-100', 'opacity-100');
            }, 50);
        }

        function closeEditModal() {
            const modal = document.getElementById('editCategoryModal');
            const modalContent = document.getElementById('editModalContent');
            modalContent.classList.remove('scale-100', 'opacity-100');
            modalContent.classList.add('scale-95', 'opacity-0');
            setTimeout(() => {
                modal.classList.remove('flex');
                modal.classList.add('hidden');
            }, 300);
        }

        document.getElementById('categoryModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        document.getElementById('editCategoryModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeEditModal();
            }
        });

        const inputs = document.querySelectorAll('input, textarea');
        inputs.forEach(input => {
            input.addEventListener('focus', () => {
                input.parentElement.classList.add('scale-105');
            });
            input.addEventListener('blur', () => {
                input.parentElement.classList.remove('scale-105');
            });
        });

        document.getElementById('categoryForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            
            if (!formData.get('categoryDescription').trim()) {
                await Swal.fire({
                    title: 'Error!',
                    text: 'Description cannot be empty or contain only spaces',
                    icon: 'error',
                    confirmButtonColor: '#EF4444'
                });
                return;
            }

            document.getElementById('loadingSpinner').classList.remove('hidden');
            
            try {
                const response = await fetch('/admin/category/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams(formData)
                });

                if (!response.ok) {
                    const error = await response.text();
                    throw new Error(error || 'Something went wrong');
                }

                await Swal.fire({
                    title: 'Success!',
                    text: 'Category added successfully',
                    icon: 'success',
                    confirmButtonColor: '#3B82F6'
                });
                
                window.location.reload();
            } catch (error) {
                await Swal.fire({
                    title: 'Error!',
                    text: error.message,
                    icon: 'error',
                    confirmButtonColor: '#EF4444'
                });
            } finally {
                document.getElementById('loadingSpinner').classList.add('hidden');
            }
        });

        document.getElementById('editCategoryForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            
            if (!formData.get('categoryDescription').trim()) {
                await Swal.fire({
                    title: 'Error!',
                    text: 'Description cannot be empty or contain only spaces',
                    icon: 'error',
                    confirmButtonColor: '#EF4444'
                });
                return;
            }

            document.getElementById('loadingSpinner').classList.remove('hidden');
            
            try {
                const response = await fetch('/admin/category/edit', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams(formData)
                });

                if (!response.ok) {
                    const error = await response.text();
                    throw new Error(error || 'Something went wrong');
                }

                await Swal.fire({
                    title: 'Success!',
                    text: 'Category updated successfully',
                    icon: 'success',
                    confirmButtonColor: '#3B82F6'
                });
                
                window.location.reload();
            } catch (error) {
                await Swal.fire({
                    title: 'Error!',
                    text: error.message,
                    icon: 'error',
                    confirmButtonColor: '#EF4444'
                });
            } finally {
                document.getElementById('loadingSpinner').classList.add('hidden');
            }
        });

        function confirmToggleCategory(categoryId, isActive) {
            const action = isActive ? 'hide' : 'show';
            const message = isActive ? 
                "This category will be hidden from users. Continue?" : 
                "This category will be visible to users. Continue?";

            Swal.fire({
                title: `${action.charAt(0).toUpperCase() + action.slice(1)} Category?`,
                text: message,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3B82F6',
                cancelButtonColor: '#6B7280',
                confirmButtonText: 'Yes',
                cancelButtonText: 'Cancel'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    document.getElementById('loadingSpinner').classList.remove('hidden');
                    try {
                        const response = await fetch(`/admin/category/toggle?id=${categoryId}`);
                        if (!response.ok) {
                            const error = await response.text();
                            throw new Error(error || 'Something went wrong');
                        }
                        
                        await Swal.fire({
                            title: 'Success!',
                            text: `Category ${action}n successfully.`,
                            icon: 'success',
                            confirmButtonColor: '#3B82F6'
                        });
                        
                        window.location.reload();
                    } catch (error) {
                        await Swal.fire({
                            title: 'Error!',
                            text: error.message,
                            icon: 'error',
                            confirmButtonColor: '#EF4444'
                        });
                    } finally {
                        document.getElementById('loadingSpinner').classList.add('hidden');
                    }
                }
            });
        }
    </script>
