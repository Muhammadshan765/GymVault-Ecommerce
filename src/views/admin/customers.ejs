    <%- include('../partials/sidebar')%>
      
    <div class="p-6 flex-1 ml-64">
        <div class="flex justify-between items-center mb-4">
            <h1 class="text-3xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent">Customers!</h1>
            <div class="flex gap-3">
            </div>
        </div>

        <!-- Customers Table -->
        <div class="overflow-x-auto bg-white shadow-lg rounded-lg">
            <table class="w-full border-collapse">
                <thead>
                    <tr class="bg-gray-200 text-left">
                        <th class="p-3 border">ID</th>
                        <th class="p-3 border">Name</th>
                        <th class="p-3 border">Email</th>
                        <th class="p-3 border">Status</th>
                        <th class="p-3 border text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (userList.length > 0) { %>
                        <% userList.forEach((user, index) => { %>
                            <tr class="hover:bg-gray-100 transition">
                                <td class="p-3 border">CUST<%= index + 1 %></td>
                                <td class="p-3 border"><%= user.firstName %> <%= user.lastName %></td>
                                <td class="p-3 border"><%= user.email %></td>
                                <td class="p-3 border">
                                    <span class="<%= user.blocked ? 'bg-red-500' : 'bg-green-500' %> text-white px-2 py-1 rounded text-sm">
                                        <%= user.blocked ? 'isBlocked' : 'isActive' %>
                                    </span>
                                </td>
                                <td class="p-3 border text-center">
                                    <button 
                                        onclick="toggleUserBlock('<%= user._id %>', <%= user.blocked %>)"
                                        class="<%= user.blocked ? 'bg-blue-500 hover:bg-blue-600' : 'bg-gray-500 hover:bg-gray-600' %> text-white px-3 py-1 rounded transition">
                                        <%= user.blocked ? 'Unblock' : 'Block' %>
                                    </button>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="5" class="p-3 border text-center">
                                <div class="flex flex-col items-center">
                                    <i class="fas fa-users text-4xl mb-2"></i>
                                    <p>No users found</p>
                                </div>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>

            <!-- Pagination -->
            <div class="mt-6 flex justify-center pagination-container">
                <nav class="flex items-center gap-2" aria-label="Pagination">
                    <% if (pagination.hasPrevPage) { %>
                        <a href="?page=<%= pagination.prevPage %>" 
                           class="bg-gray-200 px-4 py-2 rounded hover:bg-gray-300 transition">
                            Previous
                        </a>
                    <% } %>

                    <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                        <a href="?page=<%= i %>"
                           class="<%= pagination.currentPage === i ? 'bg-blue-600 text-white' : 'bg-gray-200' %> px-4 py-2 rounded hover:bg-gray-300 transition">
                            <%= i %>
                        </a>
                    <% } %>

                    <% if (pagination.hasNextPage) { %>
                        <a href="?page=<%= pagination.nextPage %>"
                           class="bg-gray-200 px-4 py-2 rounded hover:bg-gray-300 transition">
                            Next
                        </a>
                    <% } %>
                </nav>
            </div>
        </div>
    </div>

    <div id="loadingSpinner" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const utils = {
            toggleLoading: (show) => {
                document.getElementById('loadingSpinner').classList.toggle('hidden', !show);
            },

            showAlert: async ({ title, text, icon = 'success', showCancelButton = false }) => {
                return Swal.fire({
                    title,
                    text,
                    icon,
                    showCancelButton,
                    confirmButtonColor: '#10B981',
                    cancelButtonColor: '#6B7280',
                    confirmButtonText: showCancelButton ? 'Yes, proceed' : 'OK',
                    cancelButtonText: 'Cancel'
                });
            }
        };

        async function toggleUserBlock(userId, currentStatus) {
            try {
                const action = currentStatus ? 'unblock' : 'block';
                
                const result = await utils.showAlert({
                    title: `Confirm ${action}?`,
                    text: `Are you sure you want to ${action} this user?`,
                    icon: 'warning',
                    showCancelButton: true
                });

                if (!result.isConfirmed) return;

                utils.toggleLoading(true);

                const response = await fetch(`/admin/user/${userId}/toggle-block`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to update user status');
                }

                await utils.showAlert({
                    title: 'Success!',
                    text: `User has been ${action}ed successfully`,
                    icon: 'success'
                });

                window.location.reload();
            } catch (error) {
                await utils.showAlert({
                    title: 'Error!',
                    text: error.message,
                    icon: 'error'
                });
            } finally {
                utils.toggleLoading(false);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const urlParams = new URLSearchParams(window.location.search);
            const successMsg = urlParams.get('success');
            const errorMsg = urlParams.get('error');

            if (successMsg) {
                utils.showAlert({
                    title: 'Success!',
                    text: decodeURIComponent(successMsg),
                    icon: 'success'
                });
            }

            if (errorMsg) {
                utils.showAlert({
                    title: 'Error!',
                    text: decodeURIComponent(errorMsg),
                    icon: 'error'
                });
            }
        });

        async function fetchPage(page) {
            try {
                utils.toggleLoading(true);

                const response = await fetch(`/admin/customers?page=${page}`, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (!response.ok) throw new Error('Failed to fetch users');

                const html = await response.text();

                const temp = document.createElement('div');
                temp.innerHTML = html;

                const newTableBody = temp.querySelector('tbody');
                document.querySelector('tbody').innerHTML = newTableBody.innerHTML;

                const newPagination = temp.querySelector('.pagination-container');
                document.querySelector('.pagination-container').innerHTML = newPagination.innerHTML;

            } catch (error) {
                console.error('Error fetching users:', error);
                await utils.showAlert({
                    title: 'Error',
                    text: 'Failed to fetch users',
                    icon: 'error'
                });
            } finally {
                utils.toggleLoading(false);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const paginationContainer = document.querySelector('.pagination-container');
            if (paginationContainer) {
                paginationContainer.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (e.target.tagName === 'A') {
                        const page = new URLSearchParams(e.target.href.split('?')[1]).get('page');
                        fetchPage(page);
                    }
                });
            }
        });
    </script>