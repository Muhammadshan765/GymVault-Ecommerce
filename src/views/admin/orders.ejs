  
    <%- include('../partials/sidebar') %>
    <link rel="stylesheet" href="/tailwindcss/output.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
 
<!-- <div class="mybg-green"> -->
    <div class="p-8 flex-1 ml-64 bg-gradient-to-br from-violet-50 via-indigo-50 to-blue-50 min-h-screen" id="main-content">

        <h1 class="text-4xl font-extrabold bg-gradient-to-r from-violet-600 via-indigo-600 to-blue-600 bg-clip-text text-transparent tracking-tight mb-2">Order Management</h1>
        <p class="text-gray-600 mb-8">Track and manage your customer orders</p>
        <div class="flex justify-between items-center mb-6">
            <form id="filterForm" action="/admin/orders" method="GET" class="flex justify-between items-center w-full">
                <div class="relative">
                    <input 
                        type="text" 
                        id="searchInput"
                        name="search"
                        placeholder="Search orders..." 
                        value="<%= locals.search || '' %>"
                        class="px-4 py-2 pr-10 rounded-xl border border-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-all"
                    >
                    <span class="absolute right-3 top-2.5 text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </span>
                </div>
                
                <div class="flex gap-3">
                    <select id="statusFilter" name="status" class="px-4 py-2 rounded-xl border border-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-all">
                        <option value="" <%= !locals.status ? 'selected' : '' %>>All Statuses</option>
                        <option value="shipped" <%= locals.status === 'shipped' ? 'selected' : '' %>>Shipped</option>
                        <option value="delivered" <%= locals.status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                        <option value="cancelled" <%= locals.status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                        <option value="returned" <%= locals.status === 'returned' ? 'selected' : '' %>>Returned</option>
                    </select>
                    <input type="hidden" name="page" value="1">
                    <button type="submit" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-xl transition-all">
                        <i class="fas fa-search mr-1"></i> Filter
                    </button>
                    <a href="/admin/orders" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-xl transition-all flex items-center">
                        <i class="fas fa-redo-alt mr-1"></i> Reset
                    </a>
                </div>
            </form>
        </div>
        <button id="toggleSidebar" class="text-white lg:hidden"></button>
        <div class="p-4">
            <!-- Orders Table -->
            <div class="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl border border-indigo-50 overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead>
                            <tr class="bg-gradient-to-r from-violet-100 to-indigo-100">
                                <th class="px-6 py-4 text-left text-sm font-bold text-indigo-900 uppercase tracking-wider">Order Details</th>
                                <th class="px-6 py-4 text-left text-sm font-bold text-indigo-900 uppercase tracking-wider">Customer Info</th>
                                <th class="px-6 py-4 text-left text-sm font-bold text-indigo-900 uppercase tracking-wider">Items</th>
                                <th class="px-6 py-4 text-left text-sm font-bold text-indigo-900 uppercase tracking-wider">Payment</th>
                                <th class="px-6 py-4 text-left text-sm font-bold text-indigo-900 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-indigo-50">
                            <% orders.forEach(order => { %>
                                <% 
                                const hasNonPendingItems = order.items.some(item => item.order.status !== 'pending');
                                if (hasNonPendingItems) { 
                                %>
                                    <tr class="hover:bg-indigo-50/30 transition-colors duration-200" data-order="<%= order._id %>">
                                        <td class="px-6 py-4">
                                            <div class="text-sm font-medium text-indigo-900">#<%= order.orderCode %></div>
                                            <div class="text-xs text-indigo-600">
                                                <%= new Date(order.orderDate).toLocaleDateString() %>
                                            </div>
                                            <div class="text-sm font-semibold text-emerald-600 mt-1">₹<%= order.totalAmount %></div>
                                        </td>
                                        <td class="px-6 py-4">
                                            <div class="text-sm font-medium text-indigo-900">
                                                <%= order.userId.firstName %> <%= order.userId.lastName %>
                                            </div>
                                            <div class="text-xs text-indigo-600"><%= order.userId.email %></div>
                                            <button onclick="showAddressDetails('<%= JSON.stringify(order.shippingAddress).replace(/\"/g, '\\\"').replace(/'/g, '\\\'') %>')"
                                                    class="text-xs text-blue-600 hover:text-blue-800 mt-2 px-3 py-1 rounded-full bg-blue-50 hover:bg-blue-100 transition-colors duration-200">
                                                <i class="fas fa-map-marker-alt mr-1"></i> View Address
                                            </button>
                                        </td>
                                        <td class="px-6 py-4">
                                            <div class="space-y-3">
                                                <% order.items.forEach(item => { %>
                                                    <% if (item.order.status !== 'pending') { %>
                                                        <div class="flex items-center justify-between gap-3 p-3 bg-white rounded-xl shadow-sm border border-indigo-100" 
                                                             data-order="<%= order._id %>" 
                                                             data-product="<%= item.product._id %>">
                                                            <div class="flex-1">
                                                                <button onclick="showProductDetails(
                                                                    '<%= JSON.stringify(item).replace(/\"/g, '\\\"').replace(/'/g, '\\\'') %>', 
                                                                    '<%= JSON.stringify(order).replace(/\"/g, '\\\"').replace(/'/g, '\\\'') %>'
                                                                )" class="text-sm font-medium text-indigo-700 hover:text-indigo-900 transition-colors">
                                                                    <%= item.product.productName %> (×<%= item.quantity %>)
                                                                </button>
                                                                <div class="text-xs text-emerald-600 font-medium">₹<%= item.subtotal %></div>
                                                            </div>
                                                            <!-- Status and Actions -->
                                                            <div class="flex flex-col items-end gap-2">
                                                                <span class="status-badge px-3 py-1 text-xs font-medium rounded-full 
                                                                    <%= item.order.status === 'delivered' ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white' :
                                                                        item.order.status === 'cancelled' ? 'bg-gradient-to-r from-red-500 to-pink-500 text-white' :
                                                                        item.order.status === 'shipped' ? 'bg-gradient-to-r from-blue-500 to-indigo-500 text-white' :
                                                                        'bg-gradient-to-r from-yellow-400 to-orange-400 text-white' %>">
                                                                    <%= item.order.status.charAt(0).toUpperCase() + item.order.status.slice(1) %>
                                                                </span>
                                                                
                                                                <% if (!['delivered', 'cancelled', 'returned', 'refund processing'].includes(item.order.status)) { %>
                                                                    <select onchange="updateItemStatus(event, '<%= order._id %>', '<%= item.product._id %>')"
                                                                            class="status-select text-xs rounded-lg bg-gray-50 text-gray-800 border border-gray-200 focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all px-2 py-1">
                                                                            <option value="">Update Status</option>
                                                                            <option value="shipped">Ship</option>
                                                                            <option value="delivered">Deliver</option>
                                                                            <option value="cancelled">Cancel</option>
                                                                    </select>
                                                                <% } %>

                                                                <% if (item.return?.isReturnRequested && item.return.status === 'pending') { %>
                                                                    <div class="return-actions flex gap-2">
                                                                        <button onclick="handleReturn('<%= order._id %>', '<%= item.product._id %>', 'approved')"
                                                                                class="text-xs bg-gradient-to-r from-green-500 to-emerald-500 text-white px-3 py-1.5 rounded-lg hover:shadow-lg transition-all duration-300">
                                                                            Approve Return
                                                                        </button>
                                                                        <button onclick="handleReturn('<%= order._id %>', '<%= item.product._id %>', 'rejected')"
                                                                                class="text-xs bg-gradient-to-r from-red-500 to-pink-500 text-white px-3 py-1.5 rounded-lg hover:shadow-lg transition-all duration-300">
                                                                            Reject Return
                                                                        </button>
                                                                    </div>
                                                                <% } %>
                                                            </div>
                                                        </div>
                                                    <% } %>
                                                <% }); %>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4">
                                            <div class="text-sm font-medium text-indigo-900"><%= order.payment.method.toUpperCase() %></div>
                                            <div class="text-xs text-indigo-600"><%= order.payment.paymentStatus %></div>
                                        </td>
                                        <td class="px-6 py-4">
                                            <button onclick="showOrderHistory('<%= JSON.stringify(order.items).replace(/\"/g, '\\\"').replace(/'/g, '\\\'') %>')"
                                                    class="px-4 py-2 bg-gradient-to-r from-amber-400 to-orange-400 text-white rounded-xl hover:shadow-lg transition-all duration-300 flex items-center gap-2">
                                                <i class="fas fa-history"></i>
                                                View History
                                            </button>
                                        </td>
                                    </tr>
                                <% } %>
                            <% }); %>

                            <% if (!orders.some(order => order.items.some(item => item.order.status !== 'pending'))) { %>
                                <tr>
                                    <td colspan="5" class="px-6 py-12 text-center">
                                        <div class="flex flex-col items-center">
                                            <div class="w-20 h-20 bg-indigo-100 rounded-full flex items-center justify-center mb-4">
                                                <i class="fas fa-box-open text-4xl text-indigo-500"></i>
                                            </div>
                                            <p class="text-xl font-medium text-indigo-900">No active orders found</p>
                                            <p class="text-sm text-indigo-600 mt-2">All orders are currently in pending status</p>
                                        </div>
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Pagination -->
            <% if (totalPages > 1) { %>
                <div class="mt-8 flex justify-center gap-3">
                    <% if (hasPrevPage) { %>
                        <a href="?page=<%= currentPage - 1 %><%= status ? '&status=' + status : '' %><%= locals.search ? '&search=' + locals.search : '' %>" class="px-4 py-2 bg-white text-indigo-600 rounded-xl border border-indigo-200 hover:bg-indigo-50 transition-colors duration-200 shadow-sm">Previous</a>
                    <% } %>
                    
                    <% for(let i = 1; i <= totalPages; i++) { %>
                        <a href="?page=<%= i %><%= status ? '&status=' + status : '' %><%= locals.search ? '&search=' + locals.search : '' %>" 
                           class="px-4 py-2 rounded-xl transition-all duration-200 shadow-sm <%= currentPage === i ? 'bg-gradient-to-r from-indigo-600 to-violet-600 text-white' : 'bg-white text-indigo-600 border border-indigo-200 hover:bg-indigo-50' %>">
                            <%= i %>
                        </a>
                    <% } %>
                    
                    <% if (hasNextPage) { %>
                        <a href="?page=<%= currentPage + 1 %><%= status ? '&status=' + status : '' %><%= locals.search ? '&search=' + locals.search : '' %>" class="px-4 py-2 bg-white text-indigo-600 rounded-xl border border-indigo-200 hover:bg-indigo-50 transition-colors duration-200 shadow-sm">Next</a>
                    <% } %>
                </div>
            <% } %>
        </div>
    </div>
    <!-- </div> -->

    <!-- Product Details Modal -->
    <div id="productModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white p-6 rounded-lg shadow-xl max-w-2xl w-full mx-4">
            <div class="flex justify-between items-start mb-4">
                <h3 class="text-lg font-semibold text-gray-800" id="productModalTitle">Product Details</h3>
                <button onclick="closeProductModal()" class="text-gray-600 hover:text-gray-800">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div id="productModalImage" class="aspect-square bg-gray-100 rounded-lg overflow-hidden">
                    <!-- Product image will be inserted here -->
                </div>
                <div class="space-y-4">
                    <div id="productModalDetails" class="text-gray-600 space-y-2">
                        <!-- Product details will be inserted here -->
                    </div>
                    <div id="productModalStatus" class="border-t border-gray-200 pt-4 mt-4">
                        <!-- Order status history will be inserted here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Address Modal -->
    <div id="addressModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
            <div class="flex justify-between items-start mb-4">
                <h3 class="text-lg font-semibold text-gray-800">Shipping Address</h3>
                <button onclick="closeAddressModal()" class="text-gray-600 hover:text-gray-800">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="addressModalContent" class="text-gray-600">
                <!-- Address details will be inserted here -->
            </div>
        </div>
    </div>

    <!-- Order History Modal -->
    <div id="historyModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
            <div class="flex justify-between items-start mb-4">
                <h3 class="text-lg font-semibold text-gray-800">Order History</h3>
                <button onclick="closeHistoryModal()" class="text-gray-600 hover:text-gray-800">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="historyModalContent" class="text-gray-600">
                <!-- History details will be inserted here -->
            </div>
        </div>
    </div>

    <!-- Return Request Modal -->
    <div id="returnModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
                <h3 id="returnModalTitle" class="text-xl font-semibold text-gray-800 mb-4"></h3>
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm text-gray-600 mb-1">Admin Comment</label>
                        <textarea id="returnModalComment" 
                                class="w-full bg-gray-50 text-gray-800 rounded border border-gray-300 p-2"
                                rows="3"
                                placeholder="Enter comment for customer..."></textarea>
                    </div>
                    <div class="flex justify-end gap-3">
                        <button onclick="closeReturnModal()" 
                                class="px-4 py-2 bg-gray-100 text-gray-800 rounded hover:bg-gray-200">
                            Cancel
                        </button>
                        <button id="returnModalConfirm"
                                class="px-4 py-2 rounded text-white bg-blue-600 hover:bg-blue-700">
                            Confirm
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Backdrop -->
    <div id="modalBackdrop" class="fixed inset-0 bg-black/50 z-40 hidden transition-opacity duration-300 opacity-0"></div>

    <!-- Alert Modal -->
    <div id="alertModal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
        <div class="bg-zinc-800 rounded-2xl p-8 max-w-sm w-full mx-4 transform transition-all duration-300 scale-90 opacity-0 translate-y-4">
            <!-- Success Template -->
            <div id="successAlert" class="hidden">
                <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100 mb-6">
                    <i class="fas fa-check text-2xl text-green-600"></i>
                </div>
                <h3 class="text-xl font-semibold text-center text-white mb-2">Success!</h3>
                <p id="successMessage" class="text-gray-300 text-center mb-6">Operation completed successfully</p>
                <button onclick="hideAlert()" class="w-full py-3 px-4 bg-green-600 hover:bg-green-700 text-white rounded-xl transition-colors duration-200">
                    Continue
                </button>
            </div>

            <!-- Error Template -->
            <div id="errorAlert" class="hidden">
                <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-red-100 mb-6">
                    <i class="fas fa-exclamation text-2xl text-red-600"></i>
                </div>
                <h3 class="text-xl font-semibold text-center text-white mb-2">Error</h3>
                <p id="errorMessage" class="text-gray-300 text-center mb-6">Something went wrong</p>
                <button onclick="hideAlert()" class="w-full py-3 px-4 bg-red-600 hover:bg-red-700 text-white rounded-xl transition-colors duration-200">
                    Try Again
                </button>
            </div>

            <!-- Loading Template -->
            <div id="loadingAlert" class="hidden">
                <div class="mx-auto flex items-center justify-center h-16 w-16 mb-6">
                    <div class="animate-spin rounded-full h-12 w-12 border-4 border-gray-600 border-t-white"></div>
                </div>
                <h3 class="text-xl font-semibold text-center text-white mb-2">Processing</h3>
                <p class="text-gray-300 text-center">Please wait...</p>
            </div>

            <!-- Confirm Template -->
            <div id="confirmAlert" class="hidden">
                <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-yellow-100 mb-6">
                    <i class="fas fa-question text-2xl text-yellow-600"></i>
                </div>
                <h3 id="confirmTitle" class="text-xl font-semibold text-center text-white mb-2">Confirm Action</h3>
                <p id="confirmMessage" class="text-gray-300 text-center mb-6">Are you sure you want to proceed?</p>
                <div class="flex gap-4">
                    <button id="confirmCancel" class="flex-1 py-3 px-4 bg-gray-600 hover:bg-gray-700 text-white rounded-xl transition-colors duration-200">
                        Cancel
                    </button>
                    <button id="confirmProceed" class="flex-1 py-3 px-4 bg-yellow-600 hover:bg-yellow-700 text-white rounded-xl transition-colors duration-200">
                        Proceed
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Remove the client-side search and filter functions as we're now using server-side filtering
        
        // Filter form submission
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            // Keep the default form submission behavior
        });

        function showAlert(type, message = '', title = '') {
            // ... existing code ...
        }

        // ... rest of the JavaScript functions remain the same ...
    </script>

    <script>
        function searchOrders(searchTerm) {
            const rows = document.querySelectorAll('tbody tr');
            searchTerm = searchTerm.toLowerCase();
            
            rows.forEach(row => {
                // Get text from order code, customer name, and email
                const orderCode = row.querySelector('td:nth-child(1) .text-sm')?.textContent.toLowerCase() || '';
                const customerName = row.querySelector('td:nth-child(2) .text-sm')?.textContent.toLowerCase() || '';
                const customerEmail = row.querySelector('td:nth-child(2) .text-xs')?.textContent.toLowerCase() || '';
                const productNames = Array.from(row.querySelectorAll('td:nth-child(3) .text-sm')).map(el => el.textContent.toLowerCase()).join(' ');
                
                // Check if any field contains the search term
                if (orderCode.includes(searchTerm) || 
                    customerName.includes(searchTerm) || 
                    customerEmail.includes(searchTerm) ||
                    productNames.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        function filterOrders() {
            const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            
            const rows = document.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                // Get status badges
                const statusBadges = row.querySelectorAll('.status-badge');
                let matchesStatus = !statusFilter; // If no filter, all match
                
                // Check if any status badge matches the filter
                if (statusFilter) {
                    statusBadges.forEach(badge => {
                        if (badge.textContent.toLowerCase().includes(statusFilter)) {
                            matchesStatus = true;
                        }
                    });
                }
                
                // Get text for search
                const orderCode = row.querySelector('td:nth-child(1) .text-sm')?.textContent.toLowerCase() || '';
                const customerName = row.querySelector('td:nth-child(2) .text-sm')?.textContent.toLowerCase() || '';
                const customerEmail = row.querySelector('td:nth-child(2) .text-xs')?.textContent.toLowerCase() || '';
                const productNames = Array.from(row.querySelectorAll('td:nth-child(3) .text-sm')).map(el => el.textContent.toLowerCase()).join(' ');
                
                // Check if any field contains the search term
                const matchesSearch = !searchTerm || 
                    orderCode.includes(searchTerm) || 
                    customerName.includes(searchTerm) || 
                    customerEmail.includes(searchTerm) ||
                    productNames.includes(searchTerm);
                
                // Show row only if it matches both filters
                row.style.display = (matchesStatus && matchesSearch) ? '' : 'none';
            });
        }

        function resetFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('statusFilter').value = '';
            
            // Show all rows
            document.querySelectorAll('tbody tr').forEach(row => {
                row.style.display = '';
            });
        }

        // Update search to also apply status filter
        document.getElementById('searchInput').addEventListener('keyup', function() {
            filterOrders();
        });

        // Filter form submission
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const params = new URLSearchParams(formData);
            window.location.href = `/admin/orders?${params.toString()}`;
        });

        function showAlert(type, message = '', title = '') {
            const modal = document.getElementById('alertModal');
            const backdrop = document.getElementById('modalBackdrop');
            const modalContent = modal.querySelector('div > div');
            
            // Hide all alert types
            ['success', 'error', 'loading', 'confirm'].forEach(alertType => {
                document.getElementById(`${alertType}Alert`).classList.add('hidden');
            });
            
            // Show selected alert type
            const alertElement = document.getElementById(`${type}Alert`);
            alertElement.classList.remove('hidden');
            
            // Update message if provided
            if (message) {
                if (type === 'error') {
                    document.getElementById('errorMessage').textContent = message;
                } else if (type === 'success') {
                    document.getElementById('successMessage').textContent = message;
                } else if (type === 'confirm') {
                    document.getElementById('confirmMessage').textContent = message;
                    if (title) document.getElementById('confirmTitle').textContent = title;
                }
            }
            
            // Show modal with animation
            modal.classList.remove('hidden');
            backdrop.classList.remove('hidden');
            setTimeout(() => {
                backdrop.classList.remove('opacity-0');
                modalContent.classList.remove('scale-90', 'opacity-0', 'translate-y-4');
            }, 10);

            // Enable scrolling on body
            document.body.style.overflow = 'hidden';
        }

        function hideAlert() {
            const modal = document.getElementById('alertModal');
            const backdrop = document.getElementById('modalBackdrop');
            const modalContent = modal.querySelector('div > div');
            
            // Add animation classes
            backdrop.classList.add('opacity-0');
            modalContent.classList.add('scale-90', 'opacity-0', 'translate-y-4');
            
            // Hide modal after animation
            setTimeout(() => {
                modal.classList.add('hidden');
                backdrop.classList.add('hidden');
                // Reset all alert contents
                ['success', 'error', 'loading', 'confirm'].forEach(type => {
                    const element = document.getElementById(`${type}Alert`);
                    if (element) element.classList.add('hidden');
                });
                // Enable scrolling on body
                document.body.style.overflow = '';
            }, 0);
        }

        // Helper function to update UI for status changes
        function updateUIStatus(orderId, productId, newStatus) {
            const statusElement = document.querySelector(`[data-order="${orderId}"][data-product="${productId}"] .status-badge`);
            const selectElement = document.querySelector(`[data-order="${orderId}"][data-product="${productId}"] .status-select`);
            const paymentStatusElement = document.querySelector(`[data-order="${orderId}"] .payment-status`);
            
            if (statusElement) {
                // Update status badge
                statusElement.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
                
                // Update badge colors
                const colorClasses = {
                    'delivered': 'bg-green-100 text-green-800',
                    'cancelled': 'bg-red-100 text-red-800',
                    'shipped': 'bg-blue-100 text-blue-800',
                    'processing': 'bg-yellow-100 text-yellow-800',
                    'returned': 'bg-gray-100 text-gray-800'
                };

                // Remove all possible color classes and add the new one
                Object.values(colorClasses).forEach(cls => {
                    statusElement.classList.remove(...cls.split(' '));
                });
                statusElement.classList.add(...colorClasses[newStatus].split(' '));

                // Update payment status for COD orders when delivered
                if (newStatus === 'delivered' && paymentStatusElement) {
                    const paymentMethod = paymentStatusElement.getAttribute('data-payment-method');
                    if (paymentMethod === 'cod') {
                        paymentStatusElement.textContent = 'completed';
                    }
                }
            }

            // Hide status select if status is final
            if (['delivered', 'cancelled', 'returned'].includes(newStatus) && selectElement) {
                selectElement.remove();
            }
        }

        // Helper function to update UI for return status
        function updateUIReturn(orderId, productId, returnStatus) {
            const returnActionsDiv = document.querySelector(`[data-order="${orderId}"][data-product="${productId}"] .return-actions`);
            const statusBadge = document.querySelector(`[data-order="${orderId}"][data-product="${productId}"] .status-badge`);
            const paymentStatusElement = document.querySelector(`[data-order="${orderId}"] .payment-status`);
            
            if (returnActionsDiv) {
                if (returnStatus === 'approved') {
                    returnActionsDiv.innerHTML = '';
                    updateUIStatus(orderId, productId, 'returned');
                    
                    // Update payment status to refunded
                    if (paymentStatusElement) {
                        paymentStatusElement.textContent = 'refunded';
                    }
                } else if (returnStatus === 'rejected') {
                    returnActionsDiv.innerHTML = '';
                    // Update status badge to delivered
                    if (statusBadge) {
                        statusBadge.textContent = 'Delivered';
                        statusBadge.className = 'status-badge px-2 py-1 text-xs rounded-full bg-green-100 text-green-800';
                    }
                    // Update payment status to completed
                    if (paymentStatusElement) {
                        paymentStatusElement.textContent = 'completed';
                    }
                }
            }
        }

        // Updated status update function
        async function updateItemStatus(event, orderId, productId) {
            const status = event.target.value;
            if (!status) return;

            showAlert('confirm', `Are you sure you want to update the status to ${status}?`, 'Update Status');
            
            document.getElementById('confirmProceed').onclick = async () => {
                try {
                    hideAlert();
                    showAlert('loading');

                    const response = await fetch(`/admin/orders/${orderId}/items/${productId}/status`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ status })
                    });

                    const data = await response.json();
                    
                    hideAlert();
                    if (response.ok) {
                        updateUIStatus(orderId, productId, status);
                        showAlert('success', 'Status updated successfully');
                    } else {
                        throw new Error(data.message || 'Failed to update status');
                    }
                } catch (error) {
                    hideAlert();
                    showAlert('error', error.message);
                    event.target.value = '';
                }
            };

            document.getElementById('confirmCancel').onclick = () => {
                hideAlert();
                event.target.value = '';
            };
        }

        // Updated return handling function
        async function handleReturn(orderId, productId, returnStatus) {
            try {
                // Show SweetAlert2 confirmation dialog
                const result = await Swal.fire({
                    title: `${returnStatus === 'approved' ? 'Approve' : 'Reject'} Return Request`,
                    text: `Are you sure you want to ${returnStatus} this return request?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: returnStatus === 'approved' ? '#10B981' : '#EF4444',
                    cancelButtonColor: '#6B7280',
                    confirmButtonText: returnStatus === 'approved' ? 'Approve' : 'Reject',
                    cancelButtonText: 'Cancel'
                });

                if (!result.isConfirmed) {
                    return;
                }

                // Show loading state
                Swal.fire({
                    title: 'Processing...',
                    text: 'Please wait while we process your request',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch(`/admin/orders/${orderId}/items/${productId}/return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        returnStatus,
                        adminComment: `Return request ${returnStatus} by admin`
                    })
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.message || 'Failed to process return request');
                }

                // Show success message
                await Swal.fire({
                    title: 'Success!',
                    text: 'Return request processed successfully',
                    icon: 'success',
                    confirmButtonColor: '#10B981'
                });

                // Reload the page
                window.location.reload();

            } catch (error) {
                console.error('Error:', error);
                
                // Show error message
                await Swal.fire({
                    title: 'Error!',
                    text: error.message || 'An error occurred while processing the return request',
                    icon: 'error',
                    confirmButtonColor: '#EF4444'
                });
            }
        }

        function closeReturnModal() {
            const modal = document.getElementById('returnModal');
            const modalComment = document.getElementById('returnModalComment');
            modal.classList.add('hidden');
            modalComment.value = ''; // Clear the comment field
        }

        // Close modal when clicking outside
        document.getElementById('returnModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeReturnModal();
            }
        });

        function viewOrderDetails(orderId) {
            window.location.href = `/admin/orders/${orderId}/details`;
        }

        // Close modal when clicking outside
        document.getElementById('confirmModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        // Show product details modal
        function showProductDetails(itemJson, orderJson) {
            const item = JSON.parse(itemJson);
            const order = JSON.parse(orderJson);
            const modal = document.getElementById('productModal');
            const modalImage = document.getElementById('productModalImage');
            const modalDetails = document.getElementById('productModalDetails');
            const modalStatus = document.getElementById('productModalStatus');

            // Set product image
            modalImage.innerHTML = `
                <img src="${item.product.images[0]}" alt="${item.product.productName}"
                     class="w-full h-full object-cover">
            `;

            // Set product details
            modalDetails.innerHTML = `
                <h4 class="text-xl font-semibold text-gray-800">${item.product.productName}</h4>
                <p class="text-gray-600">${item.product.description}</p>
                <div class="grid grid-cols-2 gap-4 mt-4">
                    <div>
                        <p class="text-gray-600">Quantity</p>
                        <p class="text-gray-800">${item.quantity}</p>
                    </div>
                    <div>
                        <p class="text-gray-600">Price</p>
                        <p class="text-gray-800">₹${item.price}</p>
                    </div>
                    <div>
                        <p class="text-gray-600">Subtotal</p>
                        <p class="text-gray-800">₹${item.subtotal}</p>
                    </div>
                    <div>
                        <p class="text-gray-600">Status</p>
                        <p class="text-gray-800">${item.order.status}</p>
                    </div>
                </div>
            `;

            // Set status history
            modalStatus.innerHTML = `
                <h5 class="text-gray-800 font-semibold mb-2">Status History</h5>
                <div class="space-y-2">
                    ${item.order.statusHistory.map(history => `
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-600">${new Date(history.date).toLocaleString()}</span>
                            <span class="text-gray-800">${history.status}</span>
                        </div>
                        ${history.comment ? `<p class="text-xs text-gray-600">${history.comment}</p>` : ''}
                    `).join('')}
                </div>
            `;

            modal.classList.remove('hidden');
        }

        // Show address details
        function showAddressDetails(addressJson) {
            const address = JSON.parse(addressJson);
            const modal = document.getElementById('addressModal');
            const content = document.getElementById('addressModalContent');

            content.innerHTML = `
                <div class="space-y-2">
                    <p><span class="text-gray-600">Name:</span> ${address.fullName}</p>
                    <p><span class="text-gray-600">Mobile:</span> ${address.mobileNumber}</p>
                    <p><span class="text-gray-600">Address:</span> ${address.addressLine1}</p>
                    ${address.addressLine2 ? `<p>${address.addressLine2}</p>` : ''}
                    <p>${address.city}, ${address.state} - ${address.pincode}</p>
                </div>
            `;

            modal.classList.remove('hidden');
        }

        // Show order history
        function showOrderHistory(itemsJson) {
            try {
                const items = JSON.parse(itemsJson);
                const modal = document.getElementById('historyModal');
                const content = document.getElementById('historyModalContent');

                if (!items || !Array.isArray(items) || items.length === 0) {
                    content.innerHTML = '<p class="text-red-500">No history data available</p>';
                    modal.classList.remove('hidden');
                    return;
                }

                content.innerHTML = items.map(item => {
                    if (!item.product || !item.order || !item.order.statusHistory) {
                        return '<div class="mb-4 pb-4 border-b border-gray-200">No history available for this item</div>';
                    }
                    
                    return `
                        <div class="mb-4 pb-4 border-b border-gray-200">
                            <h6 class="font-semibold text-gray-800 mb-2">${item.product.productName || 'Unknown Product'}</h6>
                            <div class="space-y-2">
                                ${item.order.statusHistory.map(history => `
                                    <div>
                                        <div class="flex justify-between text-sm">
                                            <span class="text-gray-600">${new Date(history.date).toLocaleString()}</span>
                                            <span class="text-gray-800">${history.status}</span>
                                        </div>
                                        ${history.comment ? `<p class="text-xs text-gray-600">${history.comment}</p>` : ''}
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    `;
                }).join('');

                modal.classList.remove('hidden');
            } catch (error) {
                console.error("Error displaying order history:", error);
                const modal = document.getElementById('historyModal');
                const content = document.getElementById('historyModalContent');
                content.innerHTML = `<p class="text-red-500">Error loading history: ${error.message}</p>`;
                modal.classList.remove('hidden');
            }
        }

        // Close modals
        function closeProductModal() {
            document.getElementById('productModal').classList.add('hidden');
        }

        function closeAddressModal() {
            document.getElementById('addressModal').classList.add('hidden');
        }

        function closeHistoryModal() {
            document.getElementById('historyModal').classList.add('hidden');
        }

        // Close modals when clicking outside
        document.querySelectorAll('.fixed').forEach(modal => {
            modal.addEventListener('click', function(e) {
                if (e.target === this) {
                    this.classList.add('hidden');
                }
            });
        });

        // Close modal when clicking outside
        document.getElementById('alertModal').addEventListener('click', function(e) {
            if (e.target === this) {
                hideAlert();
            }
        });

        // Close modal on escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                hideAlert();
            }
        });
    </script>
</div>
 