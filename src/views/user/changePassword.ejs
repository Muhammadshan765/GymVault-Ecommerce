
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
 
    <div class="w-screen h-screen flex">
      <div class="min-h-screen w-full bg-gradient-to-br from-gray-50 to-gray-100">
        <div class="h-10"></div>
        
        <main class="container mx-auto flex flex-col md:flex-row py-10 px-6 gap-6 justify-center">
          
          <section class="w-full max-w-2xl bg-white p-8 rounded-xl shadow-lg transform hover:shadow-2xl transition duration-300">
            <div class="flex items-center gap-4 mb-8">
              <div class="w-12 h-12 rounded-full bg-black flex items-center justify-center">
                <i class="fas fa-key text-white text-xl"></i>
              </div>
              <h2 class="text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">Change Password</h2>
            </div>
            
            <form id="changePasswordForm" class="space-y-8">
              <div class="space-y-6">
                <div class="group">
                  <label class="block text-sm font-semibold text-gray-700 mb-2" for="currentPassword">
                    Current Password
                  </label>
                  <div class="relative">
                    <input
                      class="w-full border-2 border-gray-200 rounded-lg p-4 focus:ring-2 focus:ring-black focus:border-transparent transition-all duration-300 pl-12"
                      id="currentPassword"
                      type="password"
                      placeholder="Enter your current password"
                      name="currentPassword"
                    />
                    <i class="fas fa-lock absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 group-focus-within:text-black transition-colors"></i>
                  </div>
                  <p id="currentPasswordError" class="text-red-600 text-xs mt-2 hidden"></p>
                </div>
                
                <div class="group">
                  <label class="block text-sm font-semibold text-gray-700 mb-2" for="newPassword">
                    New Password
                  </label>
                  <div class="relative">
                    <input
                      class="w-full border-2 border-gray-200 rounded-lg p-4 focus:ring-2 focus:ring-black focus:border-transparent transition-all duration-300 pl-12"
                      id="newPassword"
                      type="password"
                      placeholder="Enter your new password"
                      name="newPassword"
                    />
                    <i class="fas fa-shield-alt absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 group-focus-within:text-black transition-colors"></i>
                  </div>
                  <p id="newPasswordError" class="text-red-600 text-xs mt-2 hidden"></p>
                </div>
                
                <div class="group">
                  <label class="block text-sm font-semibold text-gray-700 mb-2" for="confirmPassword">
                    Confirm New Password
                  </label>
                  <div class="relative">
                    <input
                      class="w-full border-2 border-gray-200 rounded-lg p-4 focus:ring-2 focus:ring-black focus:border-transparent transition-all duration-300 pl-12"
                      id="confirmPassword"
                      type="password"
                      placeholder="Confirm your new password"
                      name="confirmPassword"
                    />
                    <i class="fas fa-check-circle absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 group-focus-within:text-black transition-colors"></i>
                  </div>
                  <p id="confirmPasswordError" class="text-red-600 text-xs mt-2 hidden"></p>
                </div>
              </div>

              <!-- Loading Spinner -->
              <div id="loading-spinner" class="hidden fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-50">
                <div class="bg-white p-6 rounded-xl flex flex-col items-center shadow-2xl">
                  <div class="loader mb-4"></div>
                  <p class="text-gray-700 font-medium">Updating password...</p>
                </div>
              </div>

              <div class="flex justify-center mt-8">
                <button
                  class="bg-black text-white rounded-lg py-4 px-8 text-lg font-semibold hover:bg-gray-800 transform hover:scale-105 transition-all duration-300 focus:ring-4 focus:ring-offset-2 focus:ring-black"
                  type="submit"
                >
                  Update Password
                </button>
              </div>
            </form>
          </section>
        </main>

        <style>
          .loader {
            border: 4px solid #f3f3f3;
            border-radius: 50%;
            border-top: 4px solid #000;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
          }

          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>

        <script>
          document.getElementById("changePasswordForm").addEventListener("submit", async (e) => {
            e.preventDefault();

            const currentPassword = document.getElementById("currentPassword").value;
            const newPassword = document.getElementById("newPassword").value;
            const confirmPassword = document.getElementById("confirmPassword").value;
            const loadingSpinner = document.getElementById("loading-spinner");

            // Helper functions for error handling
            const showError = (elementId, message) => {
              const errorElement = document.getElementById(elementId);
              errorElement.textContent = message;
              errorElement.classList.remove('hidden');
              document.getElementById(elementId.replace('Error', '')).classList.add('border-red-500');
            };

            const hideError = (elementId) => {
              const errorElement = document.getElementById(elementId);
              errorElement.classList.add('hidden');
              document.getElementById(elementId.replace('Error', '')).classList.remove('border-red-500');
            };

            // Clear previous errors
            ['currentPassword', 'newPassword', 'confirmPassword'].forEach(id => {
              hideError(`${id}Error`);
            });

            let hasErrors = false;

            // Basic validation
            if (!currentPassword) {
              showError('currentPasswordError', 'Current password is required');
              hasErrors = true;
            }

            if (!newPassword) {
              showError('newPasswordError', 'New password is required');
              hasErrors = true;
            }

            if (!confirmPassword) {
              showError('confirmPasswordError', 'Please confirm your new password');
              hasErrors = true;
            }

            // Password strength validation
            const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{8,12}$/;
            if (newPassword && !passwordRegex.test(newPassword)) {
              showError('newPasswordError', 'Password must be between 8 and 12 characters long and contain uppercase, lowercase and a number');
              hasErrors = true;
            }

            // Password match validation
            if (newPassword && confirmPassword && newPassword !== confirmPassword) {
              showError('confirmPasswordError', 'New password and confirm password do not match');
              hasErrors = true;
            }

            if (hasErrors) return;

            // Show loading spinner
            loadingSpinner.classList.remove('hidden');

            try {
              const response = await fetch('/change-password', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  currentPassword,
                  newPassword,
                }),
              });

              const data = await response.json();
              
              // Hide loading spinner
              loadingSpinner.classList.add('hidden');

              if (response.ok) {
                // Show success message
                const successMessage = document.createElement('div');
                successMessage.className = 'fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-50';
                successMessage.innerHTML = `
                  <div class="bg-white p-8 rounded-xl flex flex-col items-center shadow-2xl transform scale-100 animate-bounce">
                    <div class="text-green-500 mb-4">
                      <i class="fas fa-check-circle text-5xl"></i>
                    </div>
                    <p class="text-gray-800 text-xl font-bold">Password Updated Successfully!</p>
                  </div>
                `;
                document.body.appendChild(successMessage);

                // Redirect after 2 seconds
                setTimeout(() => {
                  window.location.href = '/profile';
                }, 2000);
              } else {
                if (data.message.toLowerCase().includes('current password')) {
                  showError('currentPasswordError', data.message);
                } else {
                  showError('newPasswordError', data.message);
                }
              }
            } catch (error) {
              console.error("Error:", error);
              loadingSpinner.classList.add('hidden');
              showError('currentPasswordError', 'An error occurred while updating your password');
            }
          });

          // Add input event listeners to clear errors when typing
          ['currentPassword', 'newPassword', 'confirmPassword'].forEach(id => {
            document.getElementById(id).addEventListener('input', () => {
              hideError(`${id}Error`);
            });
          });
        </script>
      </div>
    </div>