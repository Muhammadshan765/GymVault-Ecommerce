 >
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
   
    <%- include("../partials/nav") %>
    <div class="flex-1">   
        <div class="flex justify-between items-center mb-4">
            
      
            <div class="bg-gradient-to-br from-blue-50 to-purple-50">
                <div class="mt-16"></div>
            
                <!-- Breadcrumb -->
                <div class="bg-gradient-to-br from-blue-50 to-purple-50 pt-4">
                  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <nav class="flex" aria-label="Breadcrumb">
                      <ol class="inline-flex items-center space-x-1 md:space-x-3">
                        <!-- Home Link -->
                        <li class="inline-flex items-center">
                          <a href="/home" 
                             class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-gray-900">
                            <i class="fas fa-home mr-2"></i>
                            Home
                          </a>
                        </li>
                        <!-- Separator -->
                        <li>
                          <div class="flex items-center">
                            <i class="fas fa-chevron-right text-gray-500 text-sm mx-2"></i>
                            <span class="text-sm font-medium text-gray-500">Shop</span>
                          </div>
                        </li>
                      </ol>
                    </nav>
                  </div>
                </div>
            
                <!-- Page Content -->
                <div class="bg-gradient-to-br from-blue-50 to-purple-50">
                  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <h2 class="text-3xl font-bold text-gray-900 mb-8 text-center"></h2>
            
                    <div class="flex flex-col md:flex-row gap-8 ">
                      <!-- Left Sidebar - Filters -->
                      <div class="md:w-1/4">
                        <div
                          class="sticky top-4 space-y-6 bg-white p-6 rounded-xl shadow-lg border border-gray-100"
                        >
                          <h2 class="text-2xl font-bold text-gray-800 mb-6 pb-3 border-b-2 border-gray-100">Filters</h2>
                          
                          <!-- Sorting Section -->
                          <div class="mb-6">
                            <label
                              for="sortFilter"
                              class="block text-gray-700 text-sm font-semibold uppercase tracking-wider mb-3"
                              >Sort By</label
                            >
                            <div class="relative">
                              <select
                                id="sortFilter"
                                class="w-full appearance-none bg-gray-50 px-4 py-3 rounded-lg border border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
                              >
                                <option value="default">Default</option>
                                <option value="nameAZ">Name: A to Z</option>
                                <option value="nameZA">Name: Z to A</option>
                                <option value="priceLowToHigh">Price: Low to High</option>
                                <option value="priceHighToLow">Price: High to Low</option>
                                <option value="ratingHighToLow">Rating: High to Low</option>
                                <option value="newArrivals">New Arrivals</option>
                              </select>
                              <div class="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
                                <i class="fas fa-chevron-down text-gray-400"></i>
                              </div>
                            </div>
                          </div>
            
                          <!-- Filter Section -->
                          <div class="space-y-6">
                            <div class="filter-group">
                              <label
                                for="size"
                                class="block text-gray-700 text-sm font-semibold uppercase tracking-wider mb-3"
                                >Size</label
                              >
                              <div class="relative">
                                <select
                                  id="size"
                                  class="w-full appearance-none bg-gray-50 px-4 py-3 rounded-lg border border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
                                >
                                  <option value="">All</option>
                                </select>
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
                                  <i class="fas fa-chevron-down text-gray-400"></i>
                                </div>
                              </div>
                            </div>
            
                            <div class="filter-group">
                              <label class="block text-gray-700 text-sm font-semibold uppercase tracking-wider mb-3"
                                >Price Range</label
                              >
                              <div class="flex gap-3">
                                <div class="relative flex-1">
                                  <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">₹</span>
                                  <input
                                    type="number"
                                    id="minPrice"
                                    class="w-full pl-8 pr-4 py-3 bg-gray-50 rounded-lg border border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
                                    placeholder="Min"
                                  />
                                </div>
                                <div class="relative flex-1">
                                  <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">₹</span>
                                  <input
                                    type="number"
                                    id="maxPrice"
                                    class="w-full pl-8 pr-4 py-3 bg-gray-50 rounded-lg border border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
                                    placeholder="Max"
                                  />
                                </div>
                              </div>
                            </div>
            
                            <div class="filter-group">
                              <label
                                for="stockFilter"
                                class="block text-gray-700 text-sm font-semibold uppercase tracking-wider mb-3"
                                >Stock Status</label
                              >
                              <div class="relative">
                                <select
                                  id="stockFilter"
                                  class="w-full appearance-none bg-gray-50 px-4 py-3 rounded-lg border border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
                                >
                                  <option value="">All Products</option>
                                  <option value="inStock">In Stock</option>
                                  <option value="outOfStock">Out of Stock</option>
                                </select>
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
                                  <i class="fas fa-chevron-down text-gray-400"></i>
                                </div>
                              </div>
                            </div>
                          </div>
            
                          <!-- Reset Button -->
                          <div class="pt-6 mt-6 border-t border-gray-100">
                            <button
                              id="resetButton"
                              class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center gap-2"
                            >
                              <i class="fas fa-redo-alt"></i>
                              Reset Filters
                            </button>
                          </div>
                        </div>
                      </div>
                      
                      <!-- Right Side - Product Grid -->
                      <div class="md:w-3/4">
                        <!-- Search Bar -->
                        <!-- <div class="mb-8">
                          <div class="max-w-2xl mx-auto">
                            <div class="relative flex items-center">
                              <input
                                type="text"
                                id="searchInput"
                                class="w-full px-6 py-4 text-base text-gray-700 placeholder-gray-400 bg-white border-2 border-gray-200 rounded-full shadow-sm focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-300"
                                placeholder="Search for amazing products..."
                              />
                              <div class="absolute right-2">
                                <button
                                  id="searchButton"
                                  class="px-6 py-2.5 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-full shadow-lg transform transition-all duration-300 ease-in-out hover:scale-105 hover:from-blue-600 hover:to-blue-700 active:scale-95 flex items-center gap-2"
                                >
                                  <i class="fas fa-search text-sm"></i>
                                  <span>Search</span>
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
             -->
                        <div
                          id="productGrid"
                          class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-16"
                        >
                          <!-- Dynamic product rendering here -->
                          <% products.forEach(product => { %>
                          <a href="/product/<%= product._id %>" 
                             class="group bg-white rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 relative flex flex-col h-full">
                            <!-- Product Image with Discount Badge -->
                            <div class="relative aspect-square overflow-hidden">
                              <img 
                                src="<%= product.imageUrl[0] %>" 
                                alt="<%= product.productName %>"
                                class="w-full h-full object-cover object-center transform transition duration-500 group-hover:scale-110"
                                loading="lazy"
                              >
                              <% if (product.offerApplied && product.offerPrice) { %>
                                <div class="absolute top-3 right-3 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-medium backdrop-blur-sm">
                                  -<%= Math.round((product.price - product.offerPrice) / product.price * 100) %>%
                                </div>
                              <% } %>
                              <% if (product.stock === 0) { %>
                                <div class="absolute inset-0 bg-black/60 backdrop-blur-[2px] flex items-center justify-center">
                                  <span class="bg-black text-white px-4 py-2 rounded-full text-sm font-medium tracking-wide">
                                    Out of Stock
                                  </span>
                                </div>
                              <% } %>
                              <!-- Wishlist Button -->
                              <button onclick="event.preventDefault(); toggleWishlist('<%= product._id %>')" 
                                      class="absolute top-3 left-3 p-2 bg-white/80 hover:bg-white rounded-full shadow-sm transition-all duration-200">
                                <i class="fas fa-heart text-lg <%= product.isInWishlist ? 'text-red-500' : 'text-gray-400' %>"></i>
                              </button>
                            </div>
            
                            <!-- Product Info -->
                            <div class="p-4 flex flex-col flex-grow">
                              <div class="flex-grow">
                                <h2 class="text-gray-900 font-medium text-lg leading-snug mb-1 line-clamp-2">
                                  <%= product.productName %>
                                </h2>
                                <div class="flex items-center gap-2 mt-2">
                                  <% if (product.offerApplied) { %>
                                    <span class="text-xl font-bold text-gray-900">₹<%= product.offerPrice %></span>
                                    <span class="text-sm text-gray-500 line-through">₹<%= product.price %></span>
                                    <span class="text-sm font-medium text-red-500">
                                      -<%= product.discountPercentage %>%
                                    </span>
                                  <% } else { %>
                                    <span class="text-xl font-bold text-gray-900">₹<%= product.price %></span>
                                  <% } %>
                                </div>
                              </div>
                              
                              <div class="mt-4 pt-4 border-t border-gray-100">
                                <button class="w-full bg-gray-900 text-white py-2 rounded-lg text-sm font-medium hover:bg-gray-800 transition-colors">
                                  View Details
                                </button>
                              </div>
                            </div>
                          </a>
                          <% }) %>
                        </div>
            
                        <div class="flex justify-center mt-12 mb-16">
                            <div class="inline-flex items-center bg-white rounded-2xl shadow-lg p-2">
                                <button id="prevPage" class="flex items-center px-5 py-3 rounded-xl text-gray-700 hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200">
                                    <i class="fas fa-arrow-left mr-2"></i>
                                    <span class="font-semibold">Prev</span>
                                </button>

                                <div class="px-6 flex items-center border-x border-gray-200">
                                    <span class="text-gray-600">Page</span>
                                    <span id="currentPage" class="mx-2 w-10 h-10 flex items-center justify-center bg-gray-900 text-white rounded-lg font-bold">1</span>
                                    <span class="text-gray-600">of</span>
                                    <span id="totalPages" class="ml-2 font-bold text-gray-800">1</span>
                                </div>

                                <button id="nextPage" class="flex items-center px-5 py-3 rounded-xl text-gray-700 hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200">
                                    <span class="font-semibold">Next</span>
                                    <i class="fas fa-arrow-right ml-2"></i>
                                </button>
                            </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
            
                <!-- Added margin/padding before footer -->
                <div class="pb-16"></div>
            
                <%- include("../partials/footer") %>
                <script>
                  document.addEventListener('DOMContentLoaded', function() {
                      // Cache DOM elements
                      const productGrid = document.getElementById('productGrid');
                      const searchInput = document.getElementById('searchInput');
                      const searchButton = document.getElementById('searchButton');
                      const sortFilter = document.getElementById('sortFilter');
                      const sizeFilter = document.getElementById('size');
                      const minPriceFilter = document.getElementById('minPrice');
                      const maxPriceFilter = document.getElementById('maxPrice');
                      const stockFilter = document.getElementById('stockFilter');
                      const resetButton = document.getElementById('resetButton');
                      const prevPageBtn = document.getElementById('prevPage');
                      const nextPageBtn = document.getElementById('nextPage');
                      const currentPageSpan = document.getElementById('currentPage');
                      const totalPagesSpan = document.getElementById('totalPages');
                     
                      
            
                      // Store original products data
                      let products = <%- JSON.stringify(products) %>;
                      const originalProducts = [...products];

                      // Function to toggle wishlist
                      async function toggleWishlist(productId) {
                          try {
                              const response = await fetch(`/wishlist/toggle/${productId}`, {
                                  method: 'POST',
                                  headers: {
                                      'Content-Type': 'application/json'
                                  }
                              });

                              if (!response.ok) throw new Error('Failed to toggle wishlist');

                              const data = await response.json();
                              
                              // Update UI based on response
                              const wishlistBtn = document.querySelector(`[onclick*="${productId}"] i`);
                              if (data.added) {
                                  wishlistBtn.classList.remove('text-gray-400');
                                  wishlistBtn.classList.add('text-red-500');
                              } else {
                                  wishlistBtn.classList.remove('text-red-500');
                                  wishlistBtn.classList.add('text-gray-400');
                              }
                          } catch (error) {
                              console.error('Error toggling wishlist:', error);
                          }
                      }
            
                      // Function to apply all filters
                      async function applyFilters() {
                          currentPage = 1; // Reset to first page when filters change
                          await fetchProducts(currentPage);
                      }
            
                      // Function to render products
                      function renderProducts(productsToRender) {
                          if (productsToRender.length === 0) {
                              productGrid.innerHTML = `
                                  <div class="col-span-full text-center py-8">
                                      <p class="text-gray-500">No products found matching your criteria</p>
                                  </div>
                              `;
                              return;
                          }
            
                          productGrid.innerHTML = productsToRender.map(product => `
                              <a href="/product/${product._id}" 
                                 class="bg-white rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-all duration-300 relative">
                                  <div class="relative aspect-[4/5] overflow-hidden">
                                      <img
                                          src="${product.imageUrl[0]}"
                                          alt="${product.productName}"
                                          class="w-full h-full object-cover hover:scale-105 transition-transform duration-300 ${product.stock === 0 ? 'opacity-60' : ''}"
                                          loading="lazy"
                                      >
                                      ${product.offerApplied && product.offerPrice ? `
                                          <div class="absolute top-2 right-2 bg-red-500 text-white px-2 py-0.5 rounded text-xs font-medium">
                                              -${Math.round((product.price - product.offerPrice) / product.price * 100)}%
                                          </div>
                                      ` : ''}
                                      ${product.stock === 0 ? `
                                          <div class="absolute inset-0 flex items-center justify-center">
                                              <span class="bg-black bg-opacity-75 text-white px-3 py-1.5 rounded-full text-sm font-medium">
                                                  Out of Stock
                                              </span>
                                          </div>
                                      ` : ''}
                                      <button onclick="event.preventDefault(); toggleWishlist('${product._id}')" 
                                              class="absolute top-2 left-2 p-2 bg-white/80 hover:bg-white rounded-full shadow-sm transition-all duration-200">
                                          <i class="fas fa-heart text-lg ${product.isInWishlist ? 'text-red-500' : 'text-gray-400'}"></i>
                                      </button>
                                  </div>
                                  <div class="p-2">
                                      <h2 class="text-gray-800 text-sm font-medium truncate">
                                          ${product.productName}
                                      </h2>
                                      <div class="flex items-baseline gap-1 mt-1">
                                          ${product.offerApplied && product.offerPrice ? `
                                              <span class="text-base font-bold text-gray-900">₹${product.offerPrice}</span>
                                              <span class="text-xs text-gray-500 line-through">₹${product.price}</span>
                                          ` : `
                                              <span class="text-base font-bold text-gray-900">₹${product.price}</span>
                                          `}
                                      </div>
                                  </div>
                              </a>
                          `).join('');
                      }
            
                      // Function to populate filter options
                      function populateFilterOptions() {
            
                          
                          // Get unique sizes
                          const sizes = [...new Set(originalProducts.flatMap(p => p.size))].filter(Boolean).sort();
                          
                         
                          
                          // Clear existing options
            
                          while (sizeFilter.options.length > 1) {
                              sizeFilter.remove(1);
                          }
            
            
                        
            
                          // Add size options
                          size.forEach(size => {
                              const option = new Option(size, size);
                              sizeFilter.add(option);
                          });
                      }
            
                      // Event listeners
                      searchButton.addEventListener('click', applyFilters);
                      searchInput.addEventListener('keyup', (e) => {
                          if (e.key === 'Enter') applyFilters();
                      });
                      
                      // Add input event listeners for immediate filtering
                      [sortFilter, sizeFilter, stockFilter].forEach(filter => {
                          filter.addEventListener('change', applyFilters);
                      });
            
                      // Add debounced event listeners for price inputs
                      let priceTimeout;
                      [minPriceFilter, maxPriceFilter].forEach(input => {
                          input.addEventListener('input', () => {
                              clearTimeout(priceTimeout);
                              priceTimeout = setTimeout(applyFilters, 500);
                          });
                      });
            
                      // Reset filters
                      resetButton.addEventListener('click', async () => {
                          searchInput.value = '';
                          sortFilter.value = 'default';
                         
                          
                          sizeFilter.value = '';
                          minPriceFilter.value = '';
                          maxPriceFilter.value = '';
                          stockFilter.value = '';
                          await fetchProducts(1);
                      });
            
                      // Add pagination state
                      let currentPage = 1;
                      let totalPages = 1;
            
                      // Function to fetch products with pagination
                      async function fetchProducts(page = 1) {
                          try {
                              const queryParams = new URLSearchParams({
                                  page,
                                  search: searchInput.value,
                                  sort: sortFilter.value,
                                  size: sizeFilter.value,
                                  minPrice: minPriceFilter.value,
                                  maxPrice: maxPriceFilter.value,
                                  stock: stockFilter.value
                              });
            
                              const response = await fetch(`/shop?${queryParams.toString()}`, {
                                  headers: {
                                      'X-Requested-With': 'XMLHttpRequest'
                                  }
                              });
                              
                              if (!response.ok) throw new Error('Network response was not ok');
                              
                              const data = await response.json();
                              
                              // Update pagination state
                              currentPage = data.pagination.currentPage;
                              totalPages = data.pagination.totalPages;
                              
                              // Update UI
                              currentPageSpan.textContent = currentPage;
                              totalPagesSpan.textContent = totalPages;
                              prevPageBtn.disabled = !data.pagination.hasPrevPage;
                              nextPageBtn.disabled = !data.pagination.hasNextPage;
                              
                              // Render products
                              renderProducts(data.products);
                              
                              // Scroll to top of product grid smoothly
                              productGrid.scrollIntoView({ behavior: 'smooth' });
                          } catch (error) {
                              console.error('Error fetching products:', error);
                          }
                      }
            
                      // Add pagination event listeners
                      prevPageBtn.addEventListener('click', () => {
                          if (currentPage > 1) {
                              fetchProducts(currentPage - 1);
                          }
                      });
            
                      nextPageBtn.addEventListener('click', () => {
                          if (currentPage < totalPages) {
                              fetchProducts(currentPage + 1);
                          }
                      });
            
                      // Initialize pagination
                      const initialPagination = <%- JSON.stringify(pagination || { currentPage: 1, totalPages: 1 }) %>;
                      currentPage = initialPagination.currentPage;
                      totalPages = initialPagination.totalPages;
                      currentPageSpan.textContent = currentPage;
                      totalPagesSpan.textContent = totalPages;
                      prevPageBtn.disabled = !initialPagination.hasPrevPage;
                      nextPageBtn.disabled = !initialPagination.hasNextPage;
            
                      // Initialize
                      populateFilterOptions();
                  });
                </script>
              </div>
            </html>

        </div>
    </div> 
